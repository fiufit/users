basePath: /
definitions:
  accounts.AdminLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  accounts.AdminLoginResponse:
    properties:
      jwt:
        type: string
    type: object
  accounts.AdminRegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  accounts.AdminRegisterResponse:
    properties:
      admin:
        $ref: '#/definitions/models.Administrator'
    type: object
  accounts.FinishRegisterRequest:
    properties:
      birth_date:
        type: string
      display_name:
        type: string
      height:
        type: integer
      interests:
        items:
          type: string
        type: array
      is_male:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      method:
        type: string
      nickname:
        type: string
      userID:
        type: string
      weight:
        type: integer
    required:
    - birth_date
    - display_name
    - height
    - is_male
    - latitude
    - longitude
    - nickname
    - weight
    type: object
  accounts.FinishRegisterResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
  accounts.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  accounts.RegisterResponse:
    properties:
      userID:
        type: string
    type: object
  contracts.ErrPayload:
    properties:
      code:
        type: string
      description:
        type: string
    type: object
  contracts.ErrResponse:
    properties:
      error:
        $ref: '#/definitions/contracts.ErrPayload'
    type: object
  contracts.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_rows:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Administrator:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Interest:
    properties:
      name:
        type: string
    type: object
  models.User:
    properties:
      bornAt:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      disabled:
        type: boolean
      displayName:
        type: string
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      height:
        type: integer
      id:
        type: string
      interests:
        items:
          $ref: '#/definitions/models.Interest'
        type: array
      isMale:
        type: boolean
      isVerifiedTrainer:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      mainLocation:
        type: string
      nickname:
        type: string
      pictureUrl:
        type: string
      weight:
        type: integer
    type: object
  users.GetFollowedUsersResponse:
    properties:
      followed:
        items:
          $ref: '#/definitions/models.User'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_rows:
        type: integer
    type: object
  users.GetUserFollowersResponse:
    properties:
      followers:
        items:
          $ref: '#/definitions/models.User'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_rows:
        type: integer
    type: object
  users.GetUsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/contracts.Pagination'
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  users.UpdateUserRequest:
    properties:
      birth_date:
        type: string
      display_name:
        type: string
      height:
        type: integer
      id:
        type: string
      interests:
        items:
          type: string
        type: array
      is_male:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      nickname:
        type: string
      weight:
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: fiufit-users.fly.dev
info:
  contact: {}
  description: Fiufit's Users service documentation. This service manages accounts,
    profiles, admin authentication, etc.
  title: Fiufit Users API
  version: dev
paths:
  /{version}/admin/login:
    post:
      consumes:
      - application/json
      description: Log in as administrator. Administrators and their credentials are
        created by other administrators
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: Body params
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/accounts.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/accounts.AdminLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Log in as administrator
      tags:
      - accounts
  /{version}/admin/register:
    post:
      consumes:
      - application/json
      description: Register a new admin. This endpoint should only be called after
        a gateway processed the corresponding authorization
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: Body params
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/accounts.AdminRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/accounts.AdminRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Register an administrator
      tags:
      - accounts
  /{version}/users/:
    get:
      consumes:
      - application/json
      description: Gets users by their name, nickname, location or verification status.
        If nickname has a value, other parameters are ignored.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User Nickname
        in: query
        name: nickname
        type: string
      - description: Substring that can be contained in either the User's Display
          Name or Nickname
        in: query
        name: name
        type: string
      - description: User Location
        in: query
        name: location
        type: string
      - description: User verification status
        in: query
        name: is_verified
        type: string
      - description: page number when getting with pagination
        in: query
        name: page
        type: integer
      - description: page size when getting with pagination
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Gets users by different query params with pagination.
      tags:
      - accounts
  /{version}/users/{userID}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID. This endpoint should only be called
        by admins or the same user. Authorization is the gateway's responsibility.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Deletes a user by their ID.
      tags:
      - accounts
    get:
      consumes:
      - application/json
      description: Gets a user by their ID.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Gets a user by their ID.
      tags:
      - accounts
    patch:
      consumes:
      - application/json
      description: Updates a user profile info.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Body params, all of them optional, ID is ignored and taken from
          path param
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Updates a user.
      tags:
      - accounts
  /{version}/users/{userID}/closest:
    get:
      consumes:
      - application/json
      description: Gets the closest users to a central user.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: userID of the person whose near users we want to find
        in: path
        name: userID
        required: true
        type: string
      - description: distance radio (meters) in which to find users
        in: query
        name: distance
        required: true
        type: integer
      - description: page number when getting with pagination
        in: query
        name: page
        type: integer
      - description: page size when getting with pagination
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/users.GetUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Gets the closest users to a central user.
      tags:
      - followers
  /{version}/users/{userID}/disable:
    delete:
      consumes:
      - application/json
      description: Disables a user by their ID, preventing them from doing further
        requests. This endpoint should only be called by admins. Authorization is
        the gateway's responsibility.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Disables a user by their ID, preventing them from doing further requests.
      tags:
      - accounts
  /{version}/users/{userID}/enable:
    post:
      consumes:
      - application/json
      description: Re-enables a user by their ID, allowing them to do further requests.
        This endpoint should only be called by admins. Authorization is the gateway's
        responsibility.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Re-enables a user by their ID, allowing them to do further requests.
      tags:
      - accounts
  /{version}/users/{userID}/followerd:
    get:
      consumes:
      - application/json
      description: Gets the followers of a user.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: userID of the person whose followed users we want to GET
        in: path
        name: userID
        required: true
        type: string
      - description: page number when getting with pagination
        in: query
        name: page
        type: integer
      - description: page size when getting with pagination
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/users.GetFollowedUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Gets the followers of a user.
      tags:
      - followers
  /{version}/users/{userID}/followers:
    get:
      consumes:
      - application/json
      description: Gets the followers of a user.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: userID of the person whose followers we want to GET
        in: path
        name: userID
        required: true
        type: string
      - description: page number when getting with pagination
        in: query
        name: page
        type: integer
      - description: page size when getting with pagination
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/users.GetUserFollowersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Gets the followers of a user.
      tags:
      - followers
    post:
      consumes:
      - application/json
      description: Creates a following relationship from the requesting user to the
        one in the route.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: userID of the following user
        in: query
        name: follower_id
        required: true
        type: string
      - description: userID of followed user
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Follow an user.
      tags:
      - followers
  /{version}/users/{userID}/followers/{followerID}:
    delete:
      consumes:
      - application/json
      description: Removes a following relationship between two users.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: userID of the following user
        in: path
        name: followerID
        required: true
        type: string
      - description: userID of followed user
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Unfollow an user.
      tags:
      - followers
  /{version}/users/finish-register:
    post:
      consumes:
      - application/json
      description: Register a new User. Mandatory to be called after /users/register
        to complete additional profile info
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: Body params
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/accounts.FinishRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/accounts.FinishRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Register a new user.
      tags:
      - accounts
  /{version}/users/login:
    post:
      consumes:
      - application/json
      description: Creates a login metric for internal visualization.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: Login  method, either 'mail' or 'federated_entity'
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Creates a login metric for internal visualization.
      tags:
      - accounts
  /{version}/users/password-recover:
    post:
      consumes:
      - application/json
      description: Creates a password recovery metric for internal visualization.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Creates a password recovery metric for internal visualization.
      tags:
      - accounts
  /{version}/users/register:
    post:
      consumes:
      - application/json
      description: Register a new User.
      parameters:
      - description: API Version
        in: path
        name: version
        required: true
        type: string
      - description: Body params
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/accounts.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Important Note: OK responses are wrapped in {"data": ... }'
          schema:
            $ref: '#/definitions/accounts.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/contracts.ErrResponse'
      summary: Register a new user.
      tags:
      - accounts
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
