// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fiufit/users/models"
	mock "github.com/stretchr/testify/mock"
)

// Admins is an autogenerated mock type for the Admins type
type Admins struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, admin
func (_m *Admins) Create(ctx context.Context, admin models.Administrator) (models.Administrator, error) {
	ret := _m.Called(ctx, admin)

	var r0 models.Administrator
	if rf, ok := ret.Get(0).(func(context.Context, models.Administrator) models.Administrator); ok {
		r0 = rf(ctx, admin)
	} else {
		r0 = ret.Get(0).(models.Administrator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Administrator) error); ok {
		r1 = rf(ctx, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Admins) GetByEmail(ctx context.Context, email string) (models.Administrator, error) {
	ret := _m.Called(ctx, email)

	var r0 models.Administrator
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Administrator); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.Administrator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdmins interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdmins creates a new instance of Admins. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdmins(t mockConstructorTestingTNewAdmins) *Admins {
	mock := &Admins{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
