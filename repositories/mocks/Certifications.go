// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	certifications "github.com/fiufit/users/contracts/certifications"

	mock "github.com/stretchr/testify/mock"

	models "github.com/fiufit/users/models"
)

// Certifications is an autogenerated mock type for the Certifications type
type Certifications struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, certification
func (_m *Certifications) Create(ctx context.Context, certification models.Certification) (models.Certification, error) {
	ret := _m.Called(ctx, certification)

	var r0 models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Certification) (models.Certification, error)); ok {
		return rf(ctx, certification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Certification) models.Certification); ok {
		r0 = rf(ctx, certification)
	} else {
		r0 = ret.Get(0).(models.Certification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Certification) error); ok {
		r1 = rf(ctx, certification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, request
func (_m *Certifications) Get(ctx context.Context, request certifications.GetCertificationsRequest) (certifications.GetCertificationsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 certifications.GetCertificationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, certifications.GetCertificationsRequest) (certifications.GetCertificationsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, certifications.GetCertificationsRequest) certifications.GetCertificationsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(certifications.GetCertificationsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, certifications.GetCertificationsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Certifications) GetByID(ctx context.Context, id uint) (models.Certification, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (models.Certification, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) models.Certification); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Certification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, certification
func (_m *Certifications) Update(ctx context.Context, certification models.Certification) (models.Certification, error) {
	ret := _m.Called(ctx, certification)

	var r0 models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Certification) (models.Certification, error)); ok {
		return rf(ctx, certification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Certification) models.Certification); ok {
		r0 = rf(ctx, certification)
	} else {
		r0 = ret.Get(0).(models.Certification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Certification) error); ok {
		r1 = rf(ctx, certification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCertifications interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertifications creates a new instance of Certifications. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertifications(t mockConstructorTestingTNewCertifications) *Certifications {
	mock := &Certifications{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
